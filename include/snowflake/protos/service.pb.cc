// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service.proto

#include "service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace photon_dance_snowflake_service {
class PhotonDanceSnowflakeServiceRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PhotonDanceSnowflakeServiceRequest> _instance;
} _PhotonDanceSnowflakeServiceRequest_default_instance_;
class PhotonDanceSnowflakeServiceResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PhotonDanceSnowflakeServiceResponse> _instance;
} _PhotonDanceSnowflakeServiceResponse_default_instance_;
}  // namespace photon_dance_snowflake_service
static void InitDefaultsscc_info_PhotonDanceSnowflakeServiceRequest_service_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::photon_dance_snowflake_service::_PhotonDanceSnowflakeServiceRequest_default_instance_;
    new (ptr) ::photon_dance_snowflake_service::PhotonDanceSnowflakeServiceRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PhotonDanceSnowflakeServiceRequest_service_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PhotonDanceSnowflakeServiceRequest_service_2eproto}, {}};

static void InitDefaultsscc_info_PhotonDanceSnowflakeServiceResponse_service_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::photon_dance_snowflake_service::_PhotonDanceSnowflakeServiceResponse_default_instance_;
    new (ptr) ::photon_dance_snowflake_service::PhotonDanceSnowflakeServiceResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PhotonDanceSnowflakeServiceResponse_service_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PhotonDanceSnowflakeServiceResponse_service_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_service_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_service_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_service_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_service_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::photon_dance_snowflake_service::PhotonDanceSnowflakeServiceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::photon_dance_snowflake_service::PhotonDanceSnowflakeServiceRequest, machine_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::photon_dance_snowflake_service::PhotonDanceSnowflakeServiceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::photon_dance_snowflake_service::PhotonDanceSnowflakeServiceResponse, uuid_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::photon_dance_snowflake_service::PhotonDanceSnowflakeServiceRequest)},
  { 6, -1, sizeof(::photon_dance_snowflake_service::PhotonDanceSnowflakeServiceResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::photon_dance_snowflake_service::_PhotonDanceSnowflakeServiceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::photon_dance_snowflake_service::_PhotonDanceSnowflakeServiceResponse_default_instance_),
};

const char descriptor_table_protodef_service_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rservice.proto\022\036photon_dance_snowflake_"
  "service\"8\n\"PhotonDanceSnowflakeServiceRe"
  "quest\022\022\n\nmachine_id\030\001 \001(\003\"3\n#PhotonDance"
  "SnowflakeServiceResponse\022\014\n\004uuid\030\001 \001(\0032\264"
  "\001\n\033PhotonDanceSnowflakeService\022\224\001\n\007GetUU"
  "ID\022B.photon_dance_snowflake_service.Phot"
  "onDanceSnowflakeServiceRequest\032C.photon_"
  "dance_snowflake_service.PhotonDanceSnowf"
  "lakeServiceResponse\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_service_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_service_2eproto_sccs[2] = {
  &scc_info_PhotonDanceSnowflakeServiceRequest_service_2eproto.base,
  &scc_info_PhotonDanceSnowflakeServiceResponse_service_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_service_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_service_2eproto = {
  false, false, descriptor_table_protodef_service_2eproto, "service.proto", 349,
  &descriptor_table_service_2eproto_once, descriptor_table_service_2eproto_sccs, descriptor_table_service_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_service_2eproto::offsets,
  file_level_metadata_service_2eproto, 2, file_level_enum_descriptors_service_2eproto, file_level_service_descriptors_service_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_service_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_service_2eproto)), true);
namespace photon_dance_snowflake_service {

// ===================================================================

class PhotonDanceSnowflakeServiceRequest::_Internal {
 public:
};

PhotonDanceSnowflakeServiceRequest::PhotonDanceSnowflakeServiceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:photon_dance_snowflake_service.PhotonDanceSnowflakeServiceRequest)
}
PhotonDanceSnowflakeServiceRequest::PhotonDanceSnowflakeServiceRequest(const PhotonDanceSnowflakeServiceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  machine_id_ = from.machine_id_;
  // @@protoc_insertion_point(copy_constructor:photon_dance_snowflake_service.PhotonDanceSnowflakeServiceRequest)
}

void PhotonDanceSnowflakeServiceRequest::SharedCtor() {
  machine_id_ = PROTOBUF_LONGLONG(0);
}

PhotonDanceSnowflakeServiceRequest::~PhotonDanceSnowflakeServiceRequest() {
  // @@protoc_insertion_point(destructor:photon_dance_snowflake_service.PhotonDanceSnowflakeServiceRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PhotonDanceSnowflakeServiceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PhotonDanceSnowflakeServiceRequest::ArenaDtor(void* object) {
  PhotonDanceSnowflakeServiceRequest* _this = reinterpret_cast< PhotonDanceSnowflakeServiceRequest* >(object);
  (void)_this;
}
void PhotonDanceSnowflakeServiceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PhotonDanceSnowflakeServiceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PhotonDanceSnowflakeServiceRequest& PhotonDanceSnowflakeServiceRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PhotonDanceSnowflakeServiceRequest_service_2eproto.base);
  return *internal_default_instance();
}


void PhotonDanceSnowflakeServiceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:photon_dance_snowflake_service.PhotonDanceSnowflakeServiceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  machine_id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PhotonDanceSnowflakeServiceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 machine_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          machine_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PhotonDanceSnowflakeServiceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:photon_dance_snowflake_service.PhotonDanceSnowflakeServiceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 machine_id = 1;
  if (this->machine_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_machine_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:photon_dance_snowflake_service.PhotonDanceSnowflakeServiceRequest)
  return target;
}

size_t PhotonDanceSnowflakeServiceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:photon_dance_snowflake_service.PhotonDanceSnowflakeServiceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 machine_id = 1;
  if (this->machine_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_machine_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PhotonDanceSnowflakeServiceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:photon_dance_snowflake_service.PhotonDanceSnowflakeServiceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PhotonDanceSnowflakeServiceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PhotonDanceSnowflakeServiceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:photon_dance_snowflake_service.PhotonDanceSnowflakeServiceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:photon_dance_snowflake_service.PhotonDanceSnowflakeServiceRequest)
    MergeFrom(*source);
  }
}

void PhotonDanceSnowflakeServiceRequest::MergeFrom(const PhotonDanceSnowflakeServiceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:photon_dance_snowflake_service.PhotonDanceSnowflakeServiceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.machine_id() != 0) {
    _internal_set_machine_id(from._internal_machine_id());
  }
}

void PhotonDanceSnowflakeServiceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:photon_dance_snowflake_service.PhotonDanceSnowflakeServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PhotonDanceSnowflakeServiceRequest::CopyFrom(const PhotonDanceSnowflakeServiceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:photon_dance_snowflake_service.PhotonDanceSnowflakeServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhotonDanceSnowflakeServiceRequest::IsInitialized() const {
  return true;
}

void PhotonDanceSnowflakeServiceRequest::InternalSwap(PhotonDanceSnowflakeServiceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(machine_id_, other->machine_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PhotonDanceSnowflakeServiceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PhotonDanceSnowflakeServiceResponse::_Internal {
 public:
};

PhotonDanceSnowflakeServiceResponse::PhotonDanceSnowflakeServiceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:photon_dance_snowflake_service.PhotonDanceSnowflakeServiceResponse)
}
PhotonDanceSnowflakeServiceResponse::PhotonDanceSnowflakeServiceResponse(const PhotonDanceSnowflakeServiceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  uuid_ = from.uuid_;
  // @@protoc_insertion_point(copy_constructor:photon_dance_snowflake_service.PhotonDanceSnowflakeServiceResponse)
}

void PhotonDanceSnowflakeServiceResponse::SharedCtor() {
  uuid_ = PROTOBUF_LONGLONG(0);
}

PhotonDanceSnowflakeServiceResponse::~PhotonDanceSnowflakeServiceResponse() {
  // @@protoc_insertion_point(destructor:photon_dance_snowflake_service.PhotonDanceSnowflakeServiceResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PhotonDanceSnowflakeServiceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PhotonDanceSnowflakeServiceResponse::ArenaDtor(void* object) {
  PhotonDanceSnowflakeServiceResponse* _this = reinterpret_cast< PhotonDanceSnowflakeServiceResponse* >(object);
  (void)_this;
}
void PhotonDanceSnowflakeServiceResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PhotonDanceSnowflakeServiceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PhotonDanceSnowflakeServiceResponse& PhotonDanceSnowflakeServiceResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PhotonDanceSnowflakeServiceResponse_service_2eproto.base);
  return *internal_default_instance();
}


void PhotonDanceSnowflakeServiceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:photon_dance_snowflake_service.PhotonDanceSnowflakeServiceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uuid_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PhotonDanceSnowflakeServiceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PhotonDanceSnowflakeServiceResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:photon_dance_snowflake_service.PhotonDanceSnowflakeServiceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 uuid = 1;
  if (this->uuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_uuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:photon_dance_snowflake_service.PhotonDanceSnowflakeServiceResponse)
  return target;
}

size_t PhotonDanceSnowflakeServiceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:photon_dance_snowflake_service.PhotonDanceSnowflakeServiceResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 uuid = 1;
  if (this->uuid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_uuid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PhotonDanceSnowflakeServiceResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:photon_dance_snowflake_service.PhotonDanceSnowflakeServiceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PhotonDanceSnowflakeServiceResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PhotonDanceSnowflakeServiceResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:photon_dance_snowflake_service.PhotonDanceSnowflakeServiceResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:photon_dance_snowflake_service.PhotonDanceSnowflakeServiceResponse)
    MergeFrom(*source);
  }
}

void PhotonDanceSnowflakeServiceResponse::MergeFrom(const PhotonDanceSnowflakeServiceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:photon_dance_snowflake_service.PhotonDanceSnowflakeServiceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uuid() != 0) {
    _internal_set_uuid(from._internal_uuid());
  }
}

void PhotonDanceSnowflakeServiceResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:photon_dance_snowflake_service.PhotonDanceSnowflakeServiceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PhotonDanceSnowflakeServiceResponse::CopyFrom(const PhotonDanceSnowflakeServiceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:photon_dance_snowflake_service.PhotonDanceSnowflakeServiceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhotonDanceSnowflakeServiceResponse::IsInitialized() const {
  return true;
}

void PhotonDanceSnowflakeServiceResponse::InternalSwap(PhotonDanceSnowflakeServiceResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(uuid_, other->uuid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PhotonDanceSnowflakeServiceResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace photon_dance_snowflake_service
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::photon_dance_snowflake_service::PhotonDanceSnowflakeServiceRequest* Arena::CreateMaybeMessage< ::photon_dance_snowflake_service::PhotonDanceSnowflakeServiceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::photon_dance_snowflake_service::PhotonDanceSnowflakeServiceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::photon_dance_snowflake_service::PhotonDanceSnowflakeServiceResponse* Arena::CreateMaybeMessage< ::photon_dance_snowflake_service::PhotonDanceSnowflakeServiceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::photon_dance_snowflake_service::PhotonDanceSnowflakeServiceResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
