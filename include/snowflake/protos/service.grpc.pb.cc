// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: service.proto

#include "service.pb.h"
#include "service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace photon_dance_snowflake_service {

static const char* PhotonDanceSnowflakeService_method_names[] = {
  "/photon_dance_snowflake_service.PhotonDanceSnowflakeService/GetUUID",
};

std::unique_ptr< PhotonDanceSnowflakeService::Stub> PhotonDanceSnowflakeService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< PhotonDanceSnowflakeService::Stub> stub(new PhotonDanceSnowflakeService::Stub(channel));
  return stub;
}

PhotonDanceSnowflakeService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetUUID_(PhotonDanceSnowflakeService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status PhotonDanceSnowflakeService::Stub::GetUUID(::grpc::ClientContext* context, const ::photon_dance_snowflake_service::PhotonDanceSnowflakeServiceRequest& request, ::photon_dance_snowflake_service::PhotonDanceSnowflakeServiceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::photon_dance_snowflake_service::PhotonDanceSnowflakeServiceRequest, ::photon_dance_snowflake_service::PhotonDanceSnowflakeServiceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetUUID_, context, request, response);
}

void PhotonDanceSnowflakeService::Stub::experimental_async::GetUUID(::grpc::ClientContext* context, const ::photon_dance_snowflake_service::PhotonDanceSnowflakeServiceRequest* request, ::photon_dance_snowflake_service::PhotonDanceSnowflakeServiceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::photon_dance_snowflake_service::PhotonDanceSnowflakeServiceRequest, ::photon_dance_snowflake_service::PhotonDanceSnowflakeServiceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetUUID_, context, request, response, std::move(f));
}

void PhotonDanceSnowflakeService::Stub::experimental_async::GetUUID(::grpc::ClientContext* context, const ::photon_dance_snowflake_service::PhotonDanceSnowflakeServiceRequest* request, ::photon_dance_snowflake_service::PhotonDanceSnowflakeServiceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetUUID_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::photon_dance_snowflake_service::PhotonDanceSnowflakeServiceResponse>* PhotonDanceSnowflakeService::Stub::PrepareAsyncGetUUIDRaw(::grpc::ClientContext* context, const ::photon_dance_snowflake_service::PhotonDanceSnowflakeServiceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::photon_dance_snowflake_service::PhotonDanceSnowflakeServiceResponse, ::photon_dance_snowflake_service::PhotonDanceSnowflakeServiceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetUUID_, context, request);
}

::grpc::ClientAsyncResponseReader< ::photon_dance_snowflake_service::PhotonDanceSnowflakeServiceResponse>* PhotonDanceSnowflakeService::Stub::AsyncGetUUIDRaw(::grpc::ClientContext* context, const ::photon_dance_snowflake_service::PhotonDanceSnowflakeServiceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetUUIDRaw(context, request, cq);
  result->StartCall();
  return result;
}

PhotonDanceSnowflakeService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PhotonDanceSnowflakeService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PhotonDanceSnowflakeService::Service, ::photon_dance_snowflake_service::PhotonDanceSnowflakeServiceRequest, ::photon_dance_snowflake_service::PhotonDanceSnowflakeServiceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PhotonDanceSnowflakeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::photon_dance_snowflake_service::PhotonDanceSnowflakeServiceRequest* req,
             ::photon_dance_snowflake_service::PhotonDanceSnowflakeServiceResponse* resp) {
               return service->GetUUID(ctx, req, resp);
             }, this)));
}

PhotonDanceSnowflakeService::Service::~Service() {
}

::grpc::Status PhotonDanceSnowflakeService::Service::GetUUID(::grpc::ServerContext* context, const ::photon_dance_snowflake_service::PhotonDanceSnowflakeServiceRequest* request, ::photon_dance_snowflake_service::PhotonDanceSnowflakeServiceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace photon_dance_snowflake_service

